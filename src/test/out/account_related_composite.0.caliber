import 'package:sqflite/sqflite.dart';
import 'dart:async';
import 'package:__test__/account_related_composite.dart';

class HealthEntryAccountRelatedProxy extends HealthEntryAccountRelated {

  HealthEntryAccountRelatedProxy();

  Map<String, dynamic> toMap() {
    var map = Map<String, dynamic>();
    map['my_id_column'] = id;
    map['account_id'] = accountId;
    map['description'] = description;

    return map;
  }

  HealthEntryAccountRelatedProxy.fromMap(Map<String, dynamic> map) {
    this.id = map['my_id_column'];
    this.accountId = map['account_id'];
    this.description = map['description'];
  }
}

mixin HealthEntryAccountRelatedDatabaseHelper {
  Future<Database> db;
  final theHealthEntryAccountRelatedColumns = [
    "my_id_column",
    "account_id",
    "description"
  ];

  final String theHealthEntryAccountRelatedTableHandler = 'my_account_related_table';
  Future createHealthEntryAccountRelatedTable(Database db) async {
    await db.execute('''CREATE TABLE $theHealthEntryAccountRelatedTableHandler (
    my_id_column INTEGER  PRIMARY KEY AUTOINCREMENT UNIQUE,
    account_id INTEGER ,
    description TEXT     ,
    UNIQUE(account_id, description)
    )''');
  }

  Future<int> saveHealthEntryAccountRelated(HealthEntryAccountRelatedProxy instanceHealthEntryAccountRelated) async {
    var dbClient = await db;

    

    var result = await dbClient.insert(theHealthEntryAccountRelatedTableHandler, instanceHealthEntryAccountRelated.toMap());
    return result;
  }

  Future<List<HealthEntryAccountRelatedProxy>> getHealthEntryAccountRelatedProxiesAll() async {
    var dbClient = await db;
    var result =
        await dbClient.query(theHealthEntryAccountRelatedTableHandler, columns: theHealthEntryAccountRelatedColumns, where: '1');

    return result.map((e) => HealthEntryAccountRelatedProxy.fromMap(e)).toList();
  }

  Future<int> getHealthEntryAccountRelatedProxiesCount() async {
    var dbClient = await db;
    return Sqflite.firstIntValue(
    await dbClient.rawQuery('SELECT COUNT(*) FROM $theHealthEntryAccountRelatedTableHandler  WHERE 1'));
  }

  Future<HealthEntryAccountRelatedProxy> getHealthEntryAccountRelated(int id) async {
    var dbClient = await db;
    List<Map> result = await dbClient.query(theHealthEntryAccountRelatedTableHandler,
        columns: theHealthEntryAccountRelatedColumns, where: '1 AND my_id_column = ?', whereArgs: [id]);


    if (result.length > 0) {
      return HealthEntryAccountRelatedProxy.fromMap(result.first);
    }

    return null;
  }

  Future<int> deleteHealthEntryAccountRelated(int id) async {
    var dbClient = await db;
    return await dbClient
        .delete(theHealthEntryAccountRelatedTableHandler, where: 'my_id_column = ?', whereArgs: [id]);
  }

  Future<bool> deleteHealthEntryAccountRelatedProxiesAll() async {
    var dbClient = await db;
    await dbClient.delete(theHealthEntryAccountRelatedTableHandler);
    return true;
  }

  Future<int> updateHealthEntryAccountRelated(HealthEntryAccountRelatedProxy instanceHealthEntryAccountRelated) async {
    var dbClient = await db;



    return await dbClient.update(theHealthEntryAccountRelatedTableHandler, instanceHealthEntryAccountRelated.toMap(),
        where: "my_id_column = ?", whereArgs: [instanceHealthEntryAccountRelated.id]);
  }
  Future<List<HealthEntryAccountRelatedProxy>> getHealthEntryAccountRelatedProxiesByAccountId(int accountId) async {
    var dbClient = await db;
    var result = await dbClient.query(theHealthEntryAccountRelatedTableHandler,
    columns: theHealthEntryAccountRelatedColumns,
    where: 'account_id = ? AND 1',
    whereArgs: [accountId]);

    return result.map((e) => HealthEntryAccountRelatedProxy.fromMap(e)).toList();
  }

}
