import 'package:sqflite/sqflite.dart';
import 'dart:async';
import 'package:__test__/softdelete_probe.dart';

class HealthEntryProxy extends HealthEntry {
  bool isDeleted;


  HealthEntryProxy();

  Map<String, dynamic> toMap() {
    var map = Map<String, dynamic>();
    map['my_id_column'] = id;
    map['my_description_column'] = description;map['is_deleted'] = isDeleted;

    return map;
  }

  HealthEntryProxy.fromMap(Map<String, dynamic> map) {
    this.id = map['my_id_column'];
    this.description = map['my_description_column'];this.isDeleted = map['is_deleted'] > 0;

  }
}

mixin HealthEntryDatabaseHelper {
  Future<Database> db;
  final theHealthEntryColumns = ["my_id_column", "my_description_column", "is_deleted"];

  final String _theHealthEntryTableHandler = 'my_health_entries_table';
  Future createHealthEntryTable(Database db) async {
await db.execute('''CREATE TABLE $_theHealthEntryTableHandler (
    my_id_column INTEGER  PRIMARY KEY AUTOINCREMENT UNIQUE,
    my_description_column TEXT  UNIQUE,
    is_deleted INTEGER DEFAULT 0        
)''');
  }

  Future<int> saveHealthEntry(HealthEntryProxy instanceHealthEntry) async {
var dbClient = await db;



var result = await dbClient.insert(_theHealthEntryTableHandler, instanceHealthEntry.toMap());
return result;
  }

  Future<List<HealthEntry>> getHealthEntryProxiesAll() async {
var dbClient = await db;
var result =
    await dbClient.query(_theHealthEntryTableHandler, columns: theHealthEntryColumns, where: 'is_deleted > 0');

return result.map((e) => HealthEntryProxy.fromMap(e)).toList();
  }

  Future<int> getHealthEntryProxiesCount() async {
var dbClient = await db;
return Sqflite.firstIntValue(
    await dbClient.rawQuery('SELECT COUNT(*) FROM $_theHealthEntryTableHandler  WHERE is_deleted > 0'));
  }

  Future<HealthEntry> getHealthEntry(int id) async {
var dbClient = await db;
List<Map> result = await dbClient.query(_theHealthEntryTableHandler,
    columns: theHealthEntryColumns, where: 'is_deleted > 0 AND my_id_column = ?', whereArgs: [id]);


if (result.length > 0) {
  return HealthEntryProxy.fromMap(result.first);
}

return null;
  }

  Future<int> deleteHealthEntry(int id) async {
var dbClient = await db;
return await dbClient
    .delete(_theHealthEntryTableHandler, where: 'my_id_column = ?', whereArgs: [id]);
  }

  Future<bool> deleteHealthEntryProxiesAll() async {
var dbClient = await db;
await dbClient.delete(_theHealthEntryTableHandler);
return true;
  }

  Future<int> updateHealthEntry(HealthEntryProxy instanceHealthEntry) async {
var dbClient = await db;



return await dbClient.update(_theHealthEntryTableHandler, instanceHealthEntry.toMap(),
    where: "my_id_column = ?", whereArgs: [instanceHealthEntry.id]);
  }
  Future<int> softdeleteHealthEntry(int id) async {
var dbClient = await db;

var map = Map<String, dynamic>();
map['is_deleted'] = DateTime.now().millisecondsSinceEpoch;

return await dbClient
    .update(_theHealthEntryTableHandler, map, where: "my_id_column = ?", whereArgs: [id]);
  }}
  