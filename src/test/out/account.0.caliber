import 'package:sqflite/sqflite.dart';
import 'dart:async';
import 'package:__test__/account.dart';

class UserAccountProxy extends UserAccount {

  UserAccountProxy({abbreviation, email, userName, isCurrent}) {
    this.abbreviation = abbreviation;
    this.email = email;
    this.userName = userName;
    this.isCurrent = isCurrent;
  }

  Map<String, dynamic> toMap() {
    var map = Map<String, dynamic>();
    map['my_id_column'] = id;
    map['my_description_column'] = description;
    map['my_abbreviation_column'] = abbreviation;
    map['my_email_column'] = email;
    map['my_userName_column'] = userName;
    map['my_is_current'] = isCurrent ? 1 : 0;

    return map;
  }

  UserAccountProxy.fromMap(Map<String, dynamic> map) {
    this.id = map['my_id_column'];
    this.description = map['my_description_column'];
    this.abbreviation = map['my_abbreviation_column'];
    this.email = map['my_email_column'];
    this.userName = map['my_userName_column'];
    this.isCurrent = map['my_is_current'] == 1 ? true : false;
  }
}

mixin UserAccountDatabaseProvider {
  Future<Database> db;
  final theUserAccountColumns = [
    "my_id_column",
    "my_description_column",
    "my_abbreviation_column",
    "my_email_column",
    "my_userName_column",
    "my_is_current"
  ];

  final String theUserAccountTableHandler = 'my_account_table';
  Future createUserAccountTable(Database db) async {
    await db.execute('''CREATE TABLE $theUserAccountTableHandler (
    my_id_column INTEGER  PRIMARY KEY AUTOINCREMENT UNIQUE,
    my_description_column TEXT  UNIQUE,
    my_abbreviation_column TEXT  NOT NULL,
    my_email_column TEXT  NOT NULL,
    my_userName_column TEXT  NOT NULL,
    my_is_current INTEGER  NOT NULL
    )''');
  }

  Future<int> saveUserAccount(UserAccountProxy instanceUserAccount) async {
    var dbClient = await db;

    

    var result = await dbClient.insert(theUserAccountTableHandler, instanceUserAccount.toMap());
    return result;
  }

  Future<List<UserAccountProxy>> getUserAccountProxiesAll() async {
    var dbClient = await db;
    var result =
        await dbClient.query(theUserAccountTableHandler, columns: theUserAccountColumns, where: '1');

    return result.map((e) => UserAccountProxy.fromMap(e)).toList();
  }

  Future<int> getUserAccountProxiesCount() async {
    var dbClient = await db;
    return Sqflite.firstIntValue(
    await dbClient.rawQuery('SELECT COUNT(*) FROM $theUserAccountTableHandler  WHERE 1'));
  }

  Future<UserAccountProxy> getUserAccount(int id) async {
    var dbClient = await db;
    List<Map> result = await dbClient.query(theUserAccountTableHandler,
        columns: theUserAccountColumns, where: '1 AND my_id_column = ?', whereArgs: [id]);


    if (result.length > 0) {
      return UserAccountProxy.fromMap(result.first);
    }

    return null;
  }

  Future<int> deleteUserAccount(int id) async {
    var dbClient = await db;
    return await dbClient
        .delete(theUserAccountTableHandler, where: 'my_id_column = ?', whereArgs: [id]);
  }

  Future<bool> deleteUserAccountProxiesAll() async {
    var dbClient = await db;
    await dbClient.delete(theUserAccountTableHandler);
    return true;
  }

  Future<int> updateUserAccount(UserAccountProxy instanceUserAccount) async {
    var dbClient = await db;



    return await dbClient.update(theUserAccountTableHandler, instanceUserAccount.toMap(),
        where: "my_id_column = ?", whereArgs: [instanceUserAccount.id]);
  }
  Future<UserAccountProxy> getCurrentUserAccount() async {
    var dbClient = await db;
    List<Map> result = await dbClient.query(theUserAccountTableHandler,
        columns: theUserAccountColumns, where: '1 AND is_current = 1');

    if (result.length > 0) {
      return UserAccountProxy.fromMap(result.first);
    }

    return null;
  }

  Future<int> setCurrentUserAccount(int id) async {
    var dbClient = await db;

    var map = Map<String, dynamic>();
    map['is_current'] = 0;

    await dbClient.update(theUserAccountTableHandler, map,
        where: "is_current = 1");

    map['is_current'] = 1;
    return await dbClient.update(theUserAccountTableHandler, map,
        where: "1 AND id = ?", whereArgs: [id]);
  }

}