import 'package:sqflite/sqflite.dart';
import 'dart:async';
import 'package:__test__/no_column_metadata.dart';

class AModelWithoutExplicitColumnMetadataProxy extends AModelWithoutExplicitColumnMetadata {

  AModelWithoutExplicitColumnMetadataProxy();

  Map<String, dynamic> toMap() {
    var map = Map<String, dynamic>();
    map['my_id_column'] = id;
    map['my_description_column'] = description;
    map['my_future_column'] = futureData;

    return map;
  }

  AModelWithoutExplicitColumnMetadataProxy.fromMap(Map<String, dynamic> map) {
    this.id = map['my_id_column'];
    this.description = map['my_description_column'];
    this.futureData = map['my_future_column'];
  }
}

mixin AModelWithoutExplicitColumnMetadataDatabaseHelper {
  Future<Database> db;
  final theAModelWithoutExplicitColumnMetadataColumns = [
    "my_id_column",
    "my_description_column",
    "my_future_column"
  ];

  final String theAModelWithoutExplicitColumnMetadataTableHandler = 'my_account_related_table';
  Future createAModelWithoutExplicitColumnMetadataTable(Database db) async {
    await db.execute('''CREATE TABLE $theAModelWithoutExplicitColumnMetadataTableHandler (
    my_id_column INTEGER ,
    my_description_column TEXT ,
    my_future_column INTEGER 
    )''');
  }

  Future<int> saveAModelWithoutExplicitColumnMetadata(AModelWithoutExplicitColumnMetadataProxy instanceAModelWithoutExplicitColumnMetadata) async {
    var dbClient = await db;

    

    var result = await dbClient.insert(theAModelWithoutExplicitColumnMetadataTableHandler, instanceAModelWithoutExplicitColumnMetadata.toMap());
    return result;
  }

  Future<List<AModelWithoutExplicitColumnMetadataProxy>> getAModelWithoutExplicitColumnMetadataProxiesAll() async {
    var dbClient = await db;
    var result =
        await dbClient.query(theAModelWithoutExplicitColumnMetadataTableHandler, columns: theAModelWithoutExplicitColumnMetadataColumns, where: '1');

    return result.map((e) => AModelWithoutExplicitColumnMetadataProxy.fromMap(e)).toList();
  }

  Future<int> getAModelWithoutExplicitColumnMetadataProxiesCount() async {
    var dbClient = await db;
    return Sqflite.firstIntValue(
    await dbClient.rawQuery('SELECT COUNT(*) FROM $theAModelWithoutExplicitColumnMetadataTableHandler  WHERE 1'));
  }

  Future<AModelWithoutExplicitColumnMetadataProxy> getAModelWithoutExplicitColumnMetadata(int id) async {
    var dbClient = await db;
    List<Map> result = await dbClient.query(theAModelWithoutExplicitColumnMetadataTableHandler,
        columns: theAModelWithoutExplicitColumnMetadataColumns, where: '1 AND null = ?', whereArgs: [id]);


    if (result.length > 0) {
      return AModelWithoutExplicitColumnMetadataProxy.fromMap(result.first);
    }

    return null;
  }

  Future<int> deleteAModelWithoutExplicitColumnMetadata(int id) async {
    var dbClient = await db;
    return await dbClient
        .delete(theAModelWithoutExplicitColumnMetadataTableHandler, where: 'null = ?', whereArgs: [id]);
  }

  Future<bool> deleteAModelWithoutExplicitColumnMetadataProxiesAll() async {
    var dbClient = await db;
    await dbClient.delete(theAModelWithoutExplicitColumnMetadataTableHandler);
    return true;
  }

  Future<int> updateAModelWithoutExplicitColumnMetadata(AModelWithoutExplicitColumnMetadataProxy instanceAModelWithoutExplicitColumnMetadata) async {
    var dbClient = await db;



    return await dbClient.update(theAModelWithoutExplicitColumnMetadataTableHandler, instanceAModelWithoutExplicitColumnMetadata.toMap(),
        where: "null = ?", whereArgs: [instanceAModelWithoutExplicitColumnMetadata.id]);
  }
}